#include <LiquidCrystal_I2C.h> // thư viện I2C
#include <FirebaseESP8266.h>
#include <ESP8266WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <Wire.h>
#include "DHT.h"
#include <BH1750.h>
#include <EEPROM.h>
FirebaseData firebaseData;
#define DHTTYPE DHT11   // DHT 11
BH1750 lightMeter;
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");
byte ngay, thang, gio, phut, giay,giay_tam;
unsigned int nam;
String path = "/";

// DHT Sensor
const int BomNuoc = 14;
const int ledPin = 16;      // the number of the LED pin
uint8_t DHTPin = D12;
const int sensorPin = A0;
// Initialize DHT sensor.
DHT dht(DHTPin, DHTTYPE);
float Temperature;
float Temperature_CD;
float Humidity;
int sensorValue ;
int moisture ;
int moisture_CD;
float lux ;

//const int interruptPin = D2;
unsigned long z, t1, t2 = 0;
int i , temp_2;
int GT1 = 0; int GTS1 = 0;
bool GT2 = false ; bool GTS2 = false;
int GT3 = 0; int GTS3 = 0;
int GT4 = 0; int GTS4 = 0;
int tam1, tam2;
byte khoangtg1_gio, khoangtg1_phut, khoangtg1_giay;
byte giocd_tg, phutcd_tg, giaycd_tg;
byte giocd1, phutcd1;
String laplai;
byte TT, TT_1 = 0, TT_2, TT_3, TT_4, TT_5, TT_6, TT_7, TT_8, TT_9, TT_10, TT_11, TT_12 = 0 ,TT_13 = 0;
int num[24] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int ss_tam = 0;
int giatritam;
byte khoangtglaplai;
signed int ss = 0;
int count = 0;
bool flag = true;
bool flag_1 = true;
bool flag_2 = false;
bool flag_3 = false;
bool flag_4 = false;
unsigned long timeDelay = millis();
int count_1 = 0;
int count_2 = 0;
int count_3 = 0;
int count_4 = 0;
///////////////////////////////////////
int MOT, HAI, BA = 0;
bool CAPNHAT_BACK;
bool CAPNHAT_CONFIRM;
bool CheDoHoatDong = true;
bool MayBom, BongDen = true;
///////////PHIM NHAN_1///////////////////
const int buttonPin =   D12;    // the number of the pushbutton pin
const int buttonPin_1 = D9;    // the number of the pushbutton pin
const int buttonPin_2 = D8;    // the number of the pushbutton pin
const int buttonPin_3 = D10;    // the number of the pushbutton pin
/////////////////////////////////////////////
int wifiConnectTime = 0; // Biến đếm thời gian kết nối WiFi
///////////////////////////////////////////////
LiquidCrystal_I2C lcd(0x27, 20, 4); // set the LCD address to 0x3F for a 16 chars and 2 line display
#define FIREBASE_HOST "https://datn-29c05-default-rtdb.firebaseio.com/"
#define FIREBASE_AUTH "zDAUv9UeuiFTB2kbMyjE83Ezai1ZQxh7N6J4xAXt"
#define WIFI_SSID "android7" // Thay đổi tên wifi của bạn
#define WIFI_PASSWORD "218197291" // Thay đổi password wifi của bạn

const char custom[][8] PROGMEM = {                        // Custom character definitions
  { 0x1F, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00 }, // char 1
  { 0x18, 0x1C, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F }, // char 2
  { 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x0F, 0x07, 0x03 }, // char 3
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1F }, // char 4
  { 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1C, 0x18 }, // char 5
  { 0x1F, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x1F, 0x1F }, // char 6
  { 0x1F, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1F }, // char 7
  { 0x03, 0x07, 0x0F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F }  // char 8
};

const char bigChars[][8] PROGMEM = {
  { 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // Space
  { 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // !
  { 0x05, 0x05, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00 }, // "
  { 0x04, 0xFF, 0x04, 0xFF, 0x04, 0x01, 0xFF, 0x01 }, // #
  { 0x08, 0xFF, 0x06, 0x07, 0xFF, 0x05, 0x00, 0x00 }, // $
  { 0x01, 0x20, 0x04, 0x01, 0x04, 0x01, 0x20, 0x04 }, // %
  { 0x08, 0x06, 0x02, 0x20, 0x03, 0x07, 0x02, 0x04 }, // &
  { 0x05, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // '
  { 0x08, 0x01, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00 }, // (
  { 0x01, 0x02, 0x04, 0x05, 0x00, 0x00, 0x00, 0x00 }, // )
  { 0x01, 0x04, 0x04, 0x01, 0x04, 0x01, 0x01, 0x04 }, // *
  { 0x04, 0xFF, 0x04, 0x01, 0xFF, 0x01, 0x00, 0x00 }, // +
  { 0x20, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //
  { 0x04, 0x04, 0x04, 0x20, 0x20, 0x20, 0x00, 0x00 }, // -
  { 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // .
  { 0x20, 0x20, 0x04, 0x01, 0x04, 0x01, 0x20, 0x20 }, // /
  { 0x08, 0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00 }, // 0
  { 0x01, 0x02, 0x20, 0x04, 0xFF, 0x04, 0x00, 0x00 }, // 1
  { 0x06, 0x06, 0x02, 0xFF, 0x07, 0x07, 0x00, 0x00 }, // 2
  { 0x01, 0x06, 0x02, 0x04, 0x07, 0x05, 0x00, 0x00 }, // 3
  { 0x03, 0x04, 0xFF, 0x20, 0x20, 0xFF, 0x00, 0x00 }, // 4
  { 0xFF, 0x06, 0x06, 0x07, 0x07, 0x05, 0x00, 0x00 }, // 5
  { 0x08, 0x06, 0x06, 0x03, 0x07, 0x05, 0x00, 0x00 }, // 6
  { 0x01, 0x01, 0x02, 0x20, 0x08, 0x20, 0x00, 0x00 }, // 7
  { 0x08, 0x06, 0x02, 0x03, 0x07, 0x05, 0x00, 0x00 }, // 8
  { 0x08, 0x06, 0x02, 0x07, 0x07, 0x05, 0x00, 0x00 }, // 9
  { 0xA5, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // :
  { 0x04, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // ;
  { 0x20, 0x04, 0x01, 0x01, 0x01, 0x04, 0x00, 0x00 }, // <
  { 0x04, 0x04, 0x04, 0x01, 0x01, 0x01, 0x00, 0x00 }, // =
  { 0x01, 0x04, 0x20, 0x04, 0x01, 0x01, 0x00, 0x00 }, // >
  { 0x01, 0x06, 0x02, 0x20, 0x07, 0x20, 0x00, 0x00 }, // ?
  { 0x08, 0x06, 0x02, 0x03, 0x04, 0x04, 0x00, 0x00 }, // @
  { 0x08, 0x06, 0x02, 0xFF, 0x20, 0xFF, 0x00, 0x00 }, // A
  { 0xFF, 0x06, 0x05, 0xFF, 0x07, 0x02, 0x00, 0x00 }, // B
  { 0x08, 0x01, 0x01, 0x03, 0x04, 0x04, 0x00, 0x00 }, // C
  { 0xFF, 0x01, 0x02, 0xFF, 0x04, 0x05, 0x00, 0x00 }, // D
  { 0xFF, 0x06, 0x06, 0xFF, 0x07, 0x07, 0x00, 0x00 }, // E
  { 0xFF, 0x06, 0x06, 0xFF, 0x20, 0x20, 0x00, 0x00 }, // F
  { 0x08, 0x01, 0x01, 0x03, 0x04, 0x02, 0x00, 0x00 }, // G
  { 0xFF, 0x04, 0xFF, 0xFF, 0x20, 0xFF, 0x00, 0x00 }, // H
  { 0x01, 0xFF, 0x01, 0x04, 0xFF, 0x04, 0x00, 0x00 }, // I
  { 0x20, 0x20, 0xFF, 0x04, 0x04, 0x05, 0x00, 0x00 }, // J
  { 0xFF, 0x04, 0x05, 0xFF, 0x20, 0x02, 0x00, 0x00 }, // K
  { 0xFF, 0x20, 0x20, 0xFF, 0x04, 0x04, 0x00, 0x00 }, // L
  { 0x08, 0x03, 0x05, 0x02, 0xFF, 0x20, 0x20, 0xFF }, // M
  { 0xFF, 0x02, 0x20, 0xFF, 0xFF, 0x20, 0x03, 0xFF }, // N
  { 0x08, 0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00 }, // 0
  { 0x08, 0x06, 0x02, 0xFF, 0x20, 0x20, 0x00, 0x00 }, // P
  { 0x08, 0x01, 0x02, 0x20, 0x03, 0x04, 0xFF, 0x04 }, // Q
  { 0xFF, 0x06, 0x02, 0xFF, 0x20, 0x02, 0x00, 0x00 }, // R
  { 0x08, 0x06, 0x06, 0x07, 0x07, 0x05, 0x00, 0x00 }, // S
  { 0x01, 0xFF, 0x01, 0x20, 0xFF, 0x20, 0x00, 0x00 }, // T
  { 0xFF, 0x20, 0xFF, 0x03, 0x04, 0x05, 0x00, 0x00 }, // U
  { 0x03, 0x20, 0x20, 0x05, 0x20, 0x02, 0x08, 0x20 }, // V
  { 0xFF, 0x20, 0x20, 0xFF, 0x03, 0x08, 0x02, 0x05 }, // W
  { 0x03, 0x04, 0x05, 0x08, 0x20, 0x02, 0x00, 0x00 }, // X
  { 0x03, 0x04, 0x05, 0x20, 0xFF, 0x20, 0x00, 0x00 }, // Y
  { 0x01, 0x06, 0x05, 0x08, 0x07, 0x04, 0x00, 0x00 }, // Z
  { 0xFF, 0x01, 0xFF, 0x04, 0x00, 0x00, 0x00, 0x00 }, // [
  { 0x01, 0x04, 0x20, 0x20, 0x20, 0x20, 0x01, 0x04 }, // Backslash
  { 0x01, 0xFF, 0x04, 0xFF, 0x00, 0x00, 0x00, 0x00 }, // ]
  { 0x08, 0x02, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00 }, // ^
  { 0x20, 0x20, 0x20, 0x04, 0x04, 0x04, 0x00, 0x00 }  // _
};
byte col, row, nb = 0, bc = 0;                            // general
byte bb[8];                                               // byte buffer for reading from PROGMEM

int addr = 0; // Địa chỉ bắt đầu của bộ nhớ EEPROM
int size = 512; // Kích thước bộ nhớ cần sử dụng (3 byte cho giờ, phút, giây)
bool STATUS_ELECTRIC = true; 
bool STATUS_ELECTRIC_CHECK,STATUS_ELECTRIC_CHECK_LAST = false;
void setup() {
  Serial.begin(9600);
  lcd.init();
  lcd.clear();
  lcd.backlight();      // Make sure backlight is on
  lcd.clear();
  Wire.begin();
  pinMode(ledPin, OUTPUT);
  pinMode(BomNuoc, OUTPUT);
  pinMode(16, OUTPUT);
  pinMode(DHTPin, INPUT);
  pinMode(13, INPUT);
  digitalWrite(BomNuoc, LOW);
  digitalWrite(ledPin, LOW);
  WiFi.begin (WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Dang ket noi");
  while (WiFi.status() != WL_CONNECTED && wifiConnectTime < 9) {
  lcd.setCursor(2, 1);
  lcd.print("STARTING SYSTEM");
  lcd.setCursor(0, 2);
  lcd.print("WAITING FOR");
  lcd.setCursor(z + 11, 2);
  lcd.print('.');
  Serial.print(".");
  delay(2200);
  z++;
  wifiConnectTime += 1; // Tăng biến đếm thời gian
  }
  if (WiFi.status() == WL_CONNECTED) {
  // Kết nối WiFi thành công, tiếp tục thực hiện các thao tác khác
  lcd.setCursor(0, 2);
  lcd.print("COMPLETED CONNECTION");
  STATUS_ELECTRIC = true;  
  delay(1000);
  } else {
  // Không kết nối được WiFi sau 15 giây, thoát khỏi vòng lặp
  lcd.setCursor(0, 2);
  lcd.print(" FAILED CONNECTION  ");
  STATUS_ELECTRIC = false; 
  TT_13 = 1;
  delay(1000);
  }
  if(STATUS_ELECTRIC == true)
  {
    pinMode(buttonPin_3, INPUT_PULLUP);
    attachInterrupt(digitalPinToInterrupt(buttonPin_3), DieuKhienPhimNhan_3, FALLING);
  }
  pinMode(buttonPin_1, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(buttonPin_1), DieuKhienPhimNhan_1, FALLING);
  pinMode(buttonPin_2, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(buttonPin_2), DieuKhienPhimNhan_2, FALLING);
  pinMode(buttonPin, INPUT_PULLUP); // Đặt chân nút nhấn làm đầu vào với điện trở kéo lên
  attachInterrupt(digitalPinToInterrupt(buttonPin), buttonPressed, FALLING); // Đăng ký hàm xử lý ngắt cho chân ngắt tương ứng với nút nhấn
  
  lcd.clear();
  delay(500);
  writeBigString("SMART" , 2, 0);
  writeBigString("GARDEN" , 0, 2);
  delay(1000);
  Serial.println ("");
  Serial.println ("Da ket noi WiFi!");
  Serial.println(WiFi.localIP());
  timeClient.begin();
  timeClient.setTimeOffset(+7 * 60 * 60);
  for (nb = 0; nb < 8; nb++ ) {                 // create 8 custom characters
    for (bc = 0; bc < 8; bc++) bb[bc] = pgm_read_byte( &custom[nb][bc] );
    lcd.createChar ( nb + 1, bb );
  }
  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  lightMeter.begin();
  lcd.clear();
  BaoHieu();
  count_1 = 0;
  flag_1  =  false;
  Firebase.setBool( firebaseData, path + "/HenGio/ThietBi_1/XacNhanLapLai", false);
  Firebase.setBool( firebaseData, path + "/CheDoHoatDong/CheDo", false);
  CheDoHoatDong = 0;
}

void loop() {
  EEPROM.begin(size);
  STATUS_ELECTRIC_CHECK_LAST = readFromEEPROM(8);
  EEPROM.end();
  if (WiFi.status() == WL_CONNECTED) {
  STATUS_ELECTRIC_CHECK = true; 
  } else {
  STATUS_ELECTRIC_CHECK = false;  
  }
  if(STATUS_ELECTRIC_CHECK_LAST != STATUS_ELECTRIC_CHECK)
  {
    STATUS_ELECTRIC_CHECK_LAST = STATUS_ELECTRIC_CHECK;
    EEPROM.begin(size);
    EEPROM.write( 8, STATUS_ELECTRIC_CHECK_LAST);
    EEPROM.commit();
    EEPROM.end(); 
    ESP.restart();
    //STATUS_ELECTRIC_CHECK_LAST = STATUS_ELECTRIC_CHECK;
  }
  timeClient.update();
  unsigned long epochTime = timeClient.getEpochTime();
  String formattedTime = timeClient.getFormattedTime();
  struct tm *ptm = gmtime ((time_t *)&epochTime);
  
  if(STATUS_ELECTRIC == true)
  {
  Serial.println("ELECTRIC-TRUE");
  gio =  timeClient.getHours();
  Serial.println(gio);
  phut = timeClient.getMinutes();
  giay = timeClient.getSeconds();
  UpdateThoiTiet();
  }
  else
  {
    Serial.println("ELECTRIC-FALSE");
    flag = false;
    if(TT_13 == 1)
    {  
    EEPROM.begin(size);
    gio = readFromEEPROM(0);
    phut = readFromEEPROM(1);
    giay = readFromEEPROM(2);
    giocd1  = readFromEEPROM(3);
    phutcd1 = readFromEEPROM(4);
    khoangtg1_phut = readFromEEPROM(5);
    khoangtg1_giay = readFromEEPROM(6);
    khoangtglaplai = readFromEEPROM(7);
    //moisture_CD    = readFromEEPROM(8);
    EEPROM.end();
    TT_13 == 0; 
    }
    if (millis() - t1 > 1000)
      {
         giay = giay + 1;
         t1 = millis();
      }
    if(giay == 60) 
    {
      phut ++;
      giay = 0;
      if(phut == 60)
      {
        phut = 0;
        gio++;
        if(gio == 24) gio = 0;
      }
    }
    UpdateEEPROM();
  }
  
  
  if (count_4 == 0)
  {
    TT_11 = 0;
    if (flag_2 == false)
    {
      lcd.clear();
      BaoHieu();
      flag_2 = true;
    }
    //Serial.println(CheDoHoatDong);
    if(STATUS_ELECTRIC == true)
    {
    if (Firebase.getBool(firebaseData, path + "/CheDoHoatDong/CheDo"))
      CheDoHoatDong = firebaseData.boolData();
    }
    if (TT_7)
    {
      lcd.clear();
      if (count_1) CheDoHoatDong = 1;
      else        CheDoHoatDong = 0;
      TT_7 = 0;
    }
    if (count_1 == 0 && CheDoHoatDong != 1)
    {
      TT_8 = TT_9 = 0;
      Hienthithoigian(gio, phut, giay);
      if (millis() - t1 > 25000)
      {
        UpdateEEPROM();
        DocCamBien();
        t1 = millis();
      }
    }

    else if (count_1 == 1)
    {
      if (flag_1 == false)
      {
        BaoHieu();
        lcd.clear();
        flag_1 == true;
      }
      //Firebase.setBool( firebaseData, path + "/CheDoHoatDong/CheDo", true);
      //Serial.println("_____I'M HERE______");
      //Trangthairelay();
      flag_1 = true;
    }
    if (CheDoHoatDong)
    {
      count_1 = 1;
      Firebase.setBool( firebaseData, path + "/CheDoHoatDong/CheDo", true);
      if(STATUS_ELECTRIC == true)
      {
      if (Firebase.getBool(firebaseData, path + "/CheDoHoatDong/MayBom"))    MayBom = firebaseData.boolData();
      if (Firebase.getBool(firebaseData, path + "/CheDoHoatDong/BongDen"))    BongDen = firebaseData.boolData();
      }
      if (MayBom == true) {
        TT_5 = 1;
        digitalWrite(BomNuoc, HIGH);
      }
      else                {
        TT_5 = 0;
        digitalWrite(BomNuoc, LOW);
      }
      if (BongDen == true) {
        TT_6 = 1;
        digitalWrite(ledPin, HIGH);
      }
      else                 {
        TT_6 = 0;
        digitalWrite(ledPin, LOW);
      }
      
      ///// DIEU KHIEN NUOC BANG PHIM NHAN ////////
      if (TT_8)
      {
        if (count_2 == 1){
          digitalWrite(BomNuoc, HIGH);
          MayBom = true;
          Firebase.setBool( firebaseData, path + "/CheDoHoatDong/MayBom", true);
        }
        else 
        { 
           MayBom = false;
           digitalWrite(BomNuoc, LOW);
          Firebase.setBool( firebaseData, path + "/CheDoHoatDong/MayBom", false);
        }
        if(STATUS_ELECTRIC == true)
        {
        if (Firebase.getBool(firebaseData, path + "/CheDoHoatDong/MayBom"))    MayBom = firebaseData.boolData();
        TT_8 = 0;
        }
      }
      ///// DIEU KHIEN DEN BANG PHIM NHAN ////////
      if (TT_9)
      {
        if (count_3 == 1)  
        {
          BongDen = true;
          digitalWrite(ledPin, HIGH);
          Firebase.setBool( firebaseData, path + "/CheDoHoatDong/BongDen", true);
        }
        else 
        {
          BongDen = false ;
          digitalWrite(ledPin, LOW);
          Firebase.setBool( firebaseData, path + "/CheDoHoatDong/BongDen", false);
        }
        if(STATUS_ELECTRIC == true)
        {
        if (Firebase.getBool(firebaseData, path + "/CheDoHoatDong/BongDen"))    BongDen = firebaseData.boolData();
        TT_9 = 0;
        }
      }
      Trangthairelay();
      //Serial.println("__***___HERE__***___");
    }
    else
    {
      count_1 = 0;
      //Serial.println("_____HERE______");
      Hengio1();
      Dieukhienmaybom();
      KiemTraNguongCamBien();   
      digitalWrite(ledPin, LOW);
    }
  }
  else
  {
    if (flag_2 == true )
    {
      //MOT =HAI =BA = 0;
      lcd.clear();
      BaoHieu();
      flag_2 = false;
    }
    lcd.setCursor(0, 0);
    lcd.printf("SETUP TIME ON  ");
    if (gio < 10)  lcd.setCursor(15, 0);
    else lcd.setCursor(14, 0);
    lcd.print(gio);
    lcd.printf(":");
    if (phut < 10)
    {
      lcd.setCursor(18, 0);
      lcd.print(" ");
      lcd.setCursor(17, 0);
      lcd.print(phut);
    }
    else 
    {
      lcd.setCursor(17, 0);
      lcd.print(phut);
    }
    lcd.setCursor(0, 1);
    lcd.printf("HOUR:");

    lcd.setCursor(10, 1);
    lcd.printf(" IN:");

    lcd.setCursor(0, 2);
    lcd.printf("MIN :");

    lcd.setCursor(10, 2);
    lcd.printf("REP:");

    lcd.setCursor(0, 3);
    lcd.printf("BACK");
    lcd.setCursor(13, 3);
    lcd.printf("CONFRIM");
    //lcd.cursor();
    //////////////////////
    lcd.setCursor(7, 1);
    lcd.print(giocd1);
    lcd.setCursor(7, 2);
    lcd.print(phutcd1);
    if (khoangtg1_phut < 10)
      lcd.setCursor(15, 1);
    else lcd.setCursor(14, 1);
    lcd.print(khoangtg1_phut);
    lcd.setCursor(16, 1);
    lcd.printf(":");
    if (khoangtg1_giay < 10) lcd.setCursor(18, 1);
    else lcd.setCursor(17, 1);
    lcd.print(khoangtg1_giay);

    lcd.setCursor(16, 2);
    lcd.print(khoangtglaplai);
    if (MOT == 1)
    {
      giatritam = giocd1;
      lcd.setCursor(6, 1);
      lcd.printf(">");
      lcd.setCursor(7, 1);
      lcd.print("  ");
      delay_ms();
      lcd.setCursor(7, 1);
      lcd.print(giatritam);
      if (giatritam > 23) giatritam = 0;
      if (giatritam < 0)  giatritam = 23;
      giocd1 = giatritam;
      CAPNHAT_BACK = 1;
      CAPNHAT_CONFIRM = 0;

    }
    else if (MOT == 2)
    {
      giatritam = phutcd1;
      lcd.setCursor(6, 1);
      lcd.printf(" ");
      lcd.setCursor(6, 2);
      lcd.printf(">");
      lcd.setCursor(7, 2);
      lcd.print("  ");
      delay_ms();
      lcd.setCursor(7, 2);
      lcd.print(giatritam);
      if (giatritam > 59) giatritam = 0;
      if (giatritam < 0) giatritam = 59;
      phutcd1 = giatritam;
      CAPNHAT_BACK = 1;
      CAPNHAT_CONFIRM = 0;
    }
    else if (MOT == 3)
    {
      giatritam = khoangtg1_phut;
      lcd.setCursor(6, 2);
      lcd.printf(" ");
      lcd.setCursor(14, 1);
      lcd.printf(">");
      lcd.setCursor(14, 2);
      lcd.print("  ");
      delay_ms();
      if (giatritam < 10)
        lcd.setCursor(15, 1);
      else lcd.setCursor(14, 1);
      lcd.print(giatritam);
      if (giatritam > 59) giatritam = 0;
      if (giatritam < 0) giatritam = 59;
      khoangtg1_phut = giatritam;
      CAPNHAT_BACK = 1;
      CAPNHAT_CONFIRM = 0;
    }

    else if (MOT == 4)
    {
      giatritam = khoangtg1_giay;
      lcd.setCursor(14, 1);
      lcd.printf(" ");
      lcd.setCursor(19, 1);
      lcd.printf("<");
      lcd.setCursor(17, 2);
      lcd.print("  ");
      delay_ms();
      if (giatritam < 10) lcd.setCursor(18, 1);
      else lcd.setCursor(17, 1);
      lcd.print(giatritam);
      if (giatritam > 59) giatritam = 0;
      if (giatritam < 0) giatritam = 59;
      khoangtg1_giay = giatritam;
      CAPNHAT_BACK = 1;
      CAPNHAT_CONFIRM = 0;
    }

    else if (MOT == 5)
    {
      giatritam = khoangtglaplai;
      lcd.setCursor(19, 1);
      lcd.printf(" ");
      lcd.setCursor(15, 2);
      lcd.printf(">");
      lcd.setCursor(16, 2);
      lcd.print("  ");
      delay_ms();
      lcd.setCursor(16, 2);
      lcd.print(giatritam);
      if (giatritam > 24) giatritam = 0;
      if (giatritam < 0)  giatritam = 24;
      khoangtglaplai = giatritam;
      CAPNHAT_BACK = 1;
      CAPNHAT_CONFIRM = 0;
    }
    else if (MOT == 6)
    {
      lcd.setCursor(15, 2);
      lcd.printf(" ");
      lcd.setCursor(13, 3);
      lcd.printf("       ");
      delay(100);
      lcd.setCursor(13, 3);
      lcd.printf("CONFRIM");
      CAPNHAT_CONFIRM = 1;
      CAPNHAT_BACK = 0;
    }
    else if (MOT == 7)
    {
      lcd.setCursor(0, 3);
      lcd.printf("    ");
      delay(100);
      lcd.setCursor(0, 3);
      lcd.printf("BACK");
      CAPNHAT_BACK = 1;
      CAPNHAT_CONFIRM = 0;
    }
  }
  if (flag_3 == true)
  {
    Firebase.setInt  ( firebaseData, path + "/HenGio/ThietBi_1/Gio", giocd1);
    Firebase.setInt  ( firebaseData, path + "/HenGio/ThietBi_1/Phut", phutcd1);
    Firebase.setInt  ( firebaseData, path + "/HenGio/ThietBi_1/KhoangTG/KhoangTG_Phut", khoangtg1_phut);
    Firebase.setInt  ( firebaseData, path + "/HenGio/ThietBi_1/KhoangTG/KhoangTG_Giay", khoangtg1_giay);
    Firebase.setInt  ( firebaseData, path + "/HenGio/ThietBi_1/KhoangTG_LapLai", khoangtglaplai);
    Firebase.setBool( firebaseData, path + "/HenGio/ThietBi_1/XacNhanLapLai", false);
    flag_3 = false;
  }
  
}

int writeBigChar(char ch, byte x, byte y) {
  if (ch < ' ' || ch > '_') return 0;               // If outside table range, do nothing
  nb = 0;                                           // character byte counter
  for (bc = 0; bc < 8; bc++) {
    bb[bc] = pgm_read_byte( &bigChars[ch - ' '][bc] ); // read 8 bytes from PROGMEM
    if (bb[bc] != 0) nb++;
  }

  bc = 0;
  for (row = y; row < y + 2; row++) {
    for (col = x; col < x + nb / 2; col++ ) {
      lcd.setCursor(col, row);                      // move to position
      lcd.write(bb[bc++]);                          // write byte and increment to next
    }
    //    lcd.setCursor(col, row);
    //    lcd.write(' ');                                 // Write ' ' between letters
  }
  return nb / 2 - 1;                                  // returns number of columns used by char
}

// writeBigString: writes out each letter of string
void writeBigString(char *str, byte x, byte y) {
  char c;
  while ((c = *str++))
    x += writeBigChar(c, x, y) + 1;
}
void Hienthithoigian(int gio, int phut , int giay)
{

  char buffer1[10]; char buffer2[10]; char buffer3[10];
  char buffer4[10]; char buffer5[10]; char buffer6[10];
  sprintf(buffer1, "%d", gio / 10);
  sprintf(buffer2, "%d", gio % 10);
  sprintf(buffer3, "%d", phut / 10);
  sprintf(buffer4, "%d", phut % 10);
  sprintf(buffer5, "%d", giay / 10);
  sprintf(buffer6, "%d", giay % 10);
  if(STATUS_ELECTRIC == true)
  {
  lcd.setCursor(0, 0);
  lcd.printf("--------AUTO--------");
  }
  else
  {
  lcd.setCursor(0, 0);
  lcd.printf("------OFFLINE-------");  
  }
  writeBigString(buffer1 , 0, 1);
  writeBigString(buffer2 , 3, 1);
  //  lcd.setCursor(6, 2);
  //  lcd.printf(":");
  writeBigString(":" , 6, 1);
  writeBigString(buffer3 , 7, 1);
  writeBigString(buffer4 , 10, 1);
  //  lcd.setCursor(13, 2);
  //  lcd.printf(":");
  writeBigString(":" , 13, 1);
  writeBigString(buffer5 , 14, 1);
  writeBigString(buffer6 , 17, 1);
  lcd.setCursor(0, 3);
  if (giocd1 < 10)lcd.printf("NEXT TIME   ");
  else  lcd.printf("NEXT TIME  ");
  lcd.print(giocd1);
  lcd.printf(":");
  lcd.setCursor(14, 3);
  lcd.print(phutcd1);
  if (phutcd1 < 10 )
  {
    lcd.setCursor(15, 3);
    lcd.printf(" ");
  }
  if(STATUS_ELECTRIC == true)
  {
  if (flag_1 == true)
  {
    lcd.clear();
    digitalWrite(ledPin, LOW);
    digitalWrite(BomNuoc, LOW);
    Firebase.setBool( firebaseData, path + "/CheDoHoatDong/CheDo", false);
    Firebase.setBool( firebaseData, path + "/CheDoHoatDong/BongDen", false);
    Firebase.setBool( firebaseData, path + "/CheDoHoatDong/MayBom", false);
    BaoHieu();
    flag_1 == false;
  }
  }
  flag_1 = false;


}
void DocCamBien()
{
  lcd.clear();
  // put your main code here, to run repeatedly:
  Temperature = dht.readTemperature(); // Gets the values of the temperature
  Humidity = dht.readHumidity(); // Gets the values of the humidity
  sensorValue = analogRead(sensorPin);
  // chuyển giá trị analog sang giá trị độ ẩm (%)
  moisture = map(sensorValue, 0, 1023, 0, 100);
  lux = 1078;
  Hienthicambien();
  if(STATUS_ELECTRIC == true){
  Firebase.setFloat( firebaseData, path + "/CamBien/NhietDo", Temperature);
  Firebase.setFloat( firebaseData, path + "/CamBien/DoAm", Humidity);
  Firebase.setInt  ( firebaseData, path + "/CamBien/DoAmDat", moisture);
  Firebase.setFloat  ( firebaseData, path + "/CamBien/AnhSang", lux);
  }

}
void Hienthicambien()
{
  lcd.setCursor(0, 0);
  lcd.printf("NHIET DO : ");
  lcd.print(Temperature);
  lcd.write(0xDF);
  lcd.printf("C");
  lcd.setCursor(0, 1);
  lcd.printf("DO AM KK : ");
  lcd.print(Humidity);
  lcd.print('%');
  lcd.setCursor(0, 2);
  lcd.printf("ANH SANG : ");
  lcd.print(lux);
  lcd.setCursor(0, 3);
  lcd.printf("DO AM DAT: ");
  lcd.print(moisture);
  lcd.print('%');
}
void Trangthairelay()
{
  if (flag_1 == false)
  {
    digitalWrite(ledPin, LOW);
    digitalWrite(BomNuoc, LOW);
    BaoHieu();
    lcd.clear();
    flag_1 == true;
  }
  flag_1 = true;
  lcd.setCursor(0, 0);
  lcd.printf("-------MANUAL-------");
  lcd.setCursor(0, 1);
  lcd.printf("WATER PUMP   LIGHT");
  if (TT_5 == 1)
  {
    writeBigString("ON  " , 0, 2);
  }
  else
  {
    writeBigString("OFF" , 0, 2);
  }
  if (TT_6 == 1)
  {
    writeBigString("ON" , 11, 2);
    lcd.setCursor(18, 2);
    lcd.printf("  ");
  }
  else
  {
    writeBigString("OFF" , 11, 2);
  }


}
void Hengio1()
{
  
  //Serial.print("GIO CAI DAT: ");
  //Serial.println(giocd1);
  //Serial.print("PHUT CAI DAT: ");
  //Serial.println(phutcd1);
  //  Serial.println(moisture_CD);
  //  Serial.println(Temperature_CD);
  if (Firebase.getBool(firebaseData, path + "/HenGio/ThietBi_1/XacNhanLapLai"))
  {
    GT2 = firebaseData.boolData();
    if (GT2 != GTS2)
    {
      if (flag == false)
      {

        Serial.println ("Mo cai dat lap lai");
        TT_3 = 1;

        if (Firebase.getInt(firebaseData, path + "/SetNguongCamBien/SetDoAmDat"))    moisture_CD = firebaseData.intData();
        if (Firebase.getFloat(firebaseData, path + "/SetNguongCamBien/SetNhietDo"))  Temperature_CD = firebaseData.floatData();
        if (Firebase.get(firebaseData, path + "/HenGio/ThietBi_1/LapLai")) {
          String data = firebaseData.stringData();

          // duyệt từng ký tự của chuỗi
          for (int i = 0; i <= data.length(); i++) {
            if (data[i] == ',') {
              // tăng biến đếm lên 1
              count++;
            }

          }
          char* ptr = strtok(const_cast<char*>(data.c_str()), ",");
          for (int y = count; y >= 0; y--)
          {
            num[y] = atoi(ptr);
            ptr = strtok(NULL, ",");
            delay(100);
          }

          int size = count + 1;

          if (gio == giocd1 || phut < phutcd1 ) temp_2 = gio;
          else temp_2 = gio + 1;
          // Sắp xếp mảng num
          qsort(num, size, sizeof(int), compare);

          // Duyệt mảng num và sửa lại giá trị các phần tử thỏa mãn điều kiện
          //bool flag = false;
          for (i = 0; i < size; i++) {
            if (num[i] >= temp_2 && num[i] < 24) {
              break;
            }
          }

          int temp = num[i];
          for (int j = i; j > 0; j--) {
            num[j] = num[j - 1];
          }
          num[0] = temp;

          for (i = 0; i < size; i++) {
            if (num[i] >= 24) {
              break;
            }
            if (num[i] >= temp_2) {
              Serial.print(num[i]);
              Serial.print(" ");
            }
          }
          for (i = 0; i < size; i++) {
            if (num[i] < 24) {
              continue;
            }
            Serial.print(num[i]);
            Serial.print(" ");
          }
          int temp_1;
          for (int i = 0; i < size / 2; i++) {
            temp_1 = num[i];
            num[i] = num[size - 1 - i];
            num[size - 1 - i] = temp_1;
          }


          giocd1 = num[count];
          ss = count;
          ss_tam = count;
          count = 0;
        }

        //t1 = millis();
        flag = true;

      }
    }

    else
    {
      if (flag == true)
      {
        Serial.println ("UPDATE");
        if (Firebase.getInt(firebaseData, path + "/HenGio/ThietBi_1/Gio"))  giocd1 = firebaseData.intData();
        if (Firebase.getInt(firebaseData, path + "/HenGio/ThietBi_1/Phut")) phutcd1 = firebaseData.intData();
        if (Firebase.getInt(firebaseData, path + "/HenGio/ThietBi_1/KhoangTG/KhoangTG_Phut")) khoangtg1_phut = firebaseData.intData();
        if (Firebase.getInt(firebaseData, path + "/HenGio/ThietBi_1/KhoangTG/KhoangTG_Giay")) khoangtg1_giay = firebaseData.intData();
        if (Firebase.getInt(firebaseData, path + "/HenGio/ThietBi_1/KhoangTG_LapLai")) khoangtglaplai = firebaseData.intData();
        lcd.setCursor(11, 3);
        lcd.print("      ");
        flag = false;
      }

      Serial.println ("Tat cai dat lap lai");
      if (millis() - t1 > 500)
      {
        Hienthithoigian(gio, phut, giay);
        if (Firebase.getInt(firebaseData, path + "/HenGio/ThietBi_1/XacNhan"))
        {
          GT1 = firebaseData.intData();
          if (GT1 != GTS1)
          {
            GTS1 = GT1;
            TT_3  = 1;

            Serial.println ("Co thay doi cai dat");
            if (Firebase.getInt(firebaseData, path + "/HenGio/ThietBi_1/Gio"))  giocd1 = firebaseData.intData();
            if (Firebase.getInt(firebaseData, path + "/HenGio/ThietBi_1/Phut")) phutcd1 = firebaseData.intData();
            if (Firebase.getInt(firebaseData, path + "/HenGio/ThietBi_1/KhoangTG/KhoangTG_Phut")) khoangtg1_phut = firebaseData.intData();
            if (Firebase.getInt(firebaseData, path + "/HenGio/ThietBi_1/KhoangTG/KhoangTG_Giay")) khoangtg1_giay = firebaseData.intData();
            if (Firebase.getInt(firebaseData, path + "/HenGio/ThietBi_1/KhoangTG_LapLai")) khoangtglaplai = firebaseData.intData();
            t1 = millis();

          }
        }
      }
    }
  }

  //CapNhatKhoangTG(khoangtg1,khoangtg1_gio,khoangtg1_phut,khoangtg1_giay);
  giocd_tg =  giocd1 +  khoangtg1_gio;
  phutcd_tg = phutcd1 +  khoangtg1_phut;
  giaycd_tg =            khoangtg1_giay;
  if ( phutcd_tg >= 60 )
  {
    phutcd_tg = phutcd_tg - 60;
    giocd_tg  = giocd_tg + 1;
  }
  if (giocd_tg == 24) giocd_tg = 0;
  if (giocd1 >= 24) giocd1 = giocd1 - 24;
  if (giocd1   == 24) giocd1 = 0;
  //Serial.println(giocd_tg);
  //Serial.println(phutcd_tg);
  //Serial.println(giaycd_tg);
  if (TT_3 == 1)
  {
    if (gio == giocd1)
    {
      if (phut == phutcd1)
      {
        TT_1 = 0;
        TT_12 = 0;
        Checkmaybom();
      }

    }
    if ( gio == giocd_tg && phut == phutcd_tg && giay >= giaycd_tg)
    {

      digitalWrite(BomNuoc, LOW);
      TT_1 = 1;
      TT_2 = 0;
      TT_12 = 1;
    }
    else
    {
      TT_12 = 0;
      TT_1 = 0;
    }

  }
  if (TT_1 == 1)
  {
    if (flag == true)
    {
      if (ss < 0 ) ss = ss_tam;
      giocd1 = num[ss];
      ss = ss - 1 ;
      TT_1 = 0;
    }
  }
  //Serial.println(TT_12);
  //Serial.println(flag);
  if (TT_12 == 1)
  {
    if (flag == false)
    {
      Serial.println ("------TUI O DAY NE ------");
      giocd1 = giocd1 + khoangtglaplai;
      if (giocd1 == 24) giocd1 = 0;
      if (giocd1 >= 24) giocd1 = giocd1 - 24;
      UpdateEEPROM();
      Firebase.setInt  ( firebaseData, path + "/HenGio/ThietBi_1/Gio", giocd1);
      TT_12 = 0;
    }
  }
}
void Checkmaybom()
{
  if (digitalRead(13))
  {
    Serial.println ("--------BAT MAY BOM--------");
    Firebase.setBool( firebaseData, path + "/CheDoHoatDong/MayBom", true);
    digitalWrite(BomNuoc, HIGH);
    TT_2 = 1;
  }
  else
  {
    Serial.println ("--------TAT MAY BOM--------");
    digitalWrite(BomNuoc, LOW);
    Firebase.setBool( firebaseData, path + "/CheDoHoatDong/MayBom", false);
    TT_2 = 0;
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Dieukhienmaybom()
{
  if (Firebase.getInt(firebaseData, path + "/SetNguongCamBien/XacNhanNguongCamBien"))
  {
    GT3 = firebaseData.intData();
    if (GT3 != GTS3)
    {
      GTS3 = GT3;
      Serial.println ("Xac Nhan Nguong Cai Dat");
      if (Firebase.getInt(firebaseData, path + "/SetNguongCamBien/SetDoAmDat"))    moisture_CD = firebaseData.intData();
      if (Firebase.getFloat(firebaseData, path + "/SetNguongCamBien/SetNhietDo"))  Temperature_CD = firebaseData.floatData();
    }
  }

}
void KiemTraNguongCamBien()
{
  if (TT_2 == 0)
  {
    if (digitalRead(13) && (moisture > moisture_CD || Temperature > Temperature_CD ))
    {
      Serial.println ("--------BAT MAY BOM----1----");
      Firebase.setBool( firebaseData, path + "/CheDoHoatDong/MayBom", true);
      digitalWrite(BomNuoc, HIGH);
      TT_3 = 0;
    }
    else
    {
      Serial.println ("--------TAT MAY BOM----1----");
      Firebase.setBool( firebaseData, path + "/CheDoHoatDong/MayBom", false);
      digitalWrite(BomNuoc, LOW);
      TT_3 = 1;
    }
  }
}
ICACHE_RAM_ATTR void buttonPressed() {
  if (millis() - timeDelay > 350)
  {
    if (digitalRead(buttonPin) == LOW)
    {
      Serial.println ("--------INTERRUPT--------");
      MOT ++;
      if (MOT > 7) MOT = 1;
      if (TT_11 == 0)
      {
        count_1 ++;
        if (count_1 > 1)count_1 = 0;
        //if(count_1 == 1) HAI = 0;
        TT_7 = 1;
        //Serial.println (MOT);
        //lcd.clear();
      }
      timeDelay = millis();
    }
  }
}
ICACHE_RAM_ATTR void DieuKhienPhimNhan_1()
{
  if (millis() - timeDelay > 20)
  {
    if (digitalRead(buttonPin_1) == LOW)
    {
      Serial.println ("--------ON----NUOC----");
      HAI = 1;
      if (HAI == 1)
      {
        giatritam ++;
        HAI = 0;
      }
      //giatritam ++;
      if (TT_11 == 0)
      {
        count_2 ++;
        if (count_2 > 1)count_2 = 0;
        TT_8 = 1;
      }
      timeDelay = millis();
    }
  }
}
ICACHE_RAM_ATTR void DieuKhienPhimNhan_2()
{
  if (millis() - timeDelay > 20)
  {
    if (digitalRead(buttonPin_2) == LOW)
    {
      Serial.println ("--------ON----DEN----");
      BA = 1;
      if (BA == 1)
      {
        giatritam --;
        BA = 0;
      }
      if (TT_11 == 0)
      {
        count_3 ++;
        if (count_3 > 1)count_3 = 0;
        TT_9 = 1;
      }
      timeDelay = millis();
    }
  }
}
ICACHE_RAM_ATTR void DieuKhienPhimNhan_3()
{
  if (millis() - timeDelay > 350)
  {
    if (digitalRead(buttonPin_3) == LOW)
    {
      Serial.println ("--------ON--------");
      MOT = 0;
      count_4 ++;
      TT_11 = 1;
      if (count_4 > 1)
      {
        count_4 = 0;
      }
      if (CAPNHAT_BACK == 1)
      {
        flag = true;
        CAPNHAT_BACK = 0;
      }
      if (CAPNHAT_CONFIRM == 1)
      {
        flag_3 = true;
        CAPNHAT_CONFIRM = 0;
      }
      timeDelay = millis();
    }
  }
}

void BaoHieu()
{
  digitalWrite(14, HIGH);
  delay(200);
  digitalWrite(14, LOW);
}

int compare(const void* a, const void* b) {
  int int_a = *((int*)a);
  int int_b = *((int*)b);

  if (int_a >= temp_2 && int_b >= temp_2) {
    return (int_a > int_b) - (int_a < int_b);
  } else if (int_a < temp_2 && int_b >= temp_2) {
    return 1;
  } else if (int_a >= temp_2 && int_b < temp_2) {
    return -1;
  } else {
    return (int_a > int_b) - (int_a < int_b);
  }
}

byte readFromEEPROM(int address) {
  byte value = EEPROM.read(address); // Đọc giá trị từ EEPROM
  return value;
}

void UpdateEEPROM()
{
  EEPROM.begin(size);
  EEPROM.write(addr, gio);
  EEPROM.write(addr + 1, phut);
  EEPROM.write(addr + 2, giay);
  //////////////////////////
  EEPROM.write(addr + 3, giocd1);
  EEPROM.write(addr + 4, phutcd1);
  EEPROM.write(addr + 5, khoangtg1_phut);
  EEPROM.write(addr + 6, khoangtg1_giay);
  EEPROM.write(addr + 7, khoangtglaplai);
  /////////////////////////// moisture_CD
  //EEPROM.write(addr + 8, moisture_CD);
  EEPROM.commit();
  EEPROM.end(); 
}

void UpdateThoiTiet()
{
   if (digitalRead(13)) Firebase.setBool( firebaseData, path + "/CamBien/ThoiTiet", false);
   else Firebase.setBool( firebaseData, path + "/CamBien/ThoiTiet", true);
}

void delay_ms()
{
  delay(130);
}
